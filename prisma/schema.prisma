// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// type Insurance {
//   provider     String
//   policyNumber String
//   coverateType String
// }

// type EmergencyContact {
//   name         String
//   relationship String
//   phone        String
// }

// type PreviousSurgery {
//   surgery String
//   year    Int
// }

// type MedicalHistory {
//   chronicCondition  String[]
//   previousSurgeries PreviousSurgery[]
//   allergies         String[]
//   familyHistory     String[]
// }

// type CurrentMedication {
//   name      String
//   dosage    String
//   frequency String
//   startDate DateTime
// }

// type Diagnosis {
//   primaryDiagnosis String
//   code             String
//   treatmentPlan    String
// }

// type Immunization {
//   vaccine     String
//   date        DateTime
//   nextBooster DateTime
// }

model Patient {
  id                 String            @id @default(uuid()) @map("_id") // Unique identifier for each patient
  name               String
  age                Int
  sex                String
  email              String
  phone              String
  insurance          String
  registrationDate   DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  secondaryPhone     String?
  languagePreference String?
  address            String?
  bloodType          String? // Nullable if no data provided
  allergies          String?
  currentMedication  String? // Nullable for optional data
  chronicConditions  String? // Nullable for optional data
  emergencyContact   EmergencyContact? // Storing as a JSON object for flexibility
  notes              String? // Nullable for additional info
  occupation         String?
  maritalStatus      String?
}

type EmergencyContact {
  emergencyContactName   String?
  emergencyContactNumber String?
  relationshipToPatient  String?
}

model User {
  id        String        @id @default(uuid()) @map("_id")
  username  String
  password  String
  privilege PrivilegeEnum
}

model Session {
  id        String   @id @default(uuid()) @map("_id")
  userId    String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PrivilegeEnum {
  ADMIN
  USER
}
